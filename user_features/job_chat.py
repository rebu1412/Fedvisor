import streamlit as st
import sqlite3
import google.generativeai as genai
import re
from create_user.database import track_usage

# C·∫•u h√¨nh API c·ªßa Gemini
genai.configure(api_key=st.secrets["API_KEY"])
DB_PATH = "data/data.db"

def fetch_job_details(job_codes):
    """L·∫•y th√¥ng tin chi ti·∫øt c·ªßa nhi·ªÅu c√¥ng vi·ªác t·ª´ database."""
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        placeholders = ",".join(["?"] * len(job_codes))  # T·∫°o danh s√°ch placeholders (?, ?, ...)
        query = f"SELECT * FROM jobs WHERE job_code IN ({placeholders})"
        cursor.execute(query, job_codes)
        return cursor.fetchall()

def process_user_query(user_query):
    """X·ª≠ l√Ω c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng v√† t·∫°o prompt cho AI v·ªõi nhi·ªÅu m√£ c√¥ng vi·ªác."""
    job_codes = re.findall(r"#([A-Za-z0-9]+)", user_query)  # T√¨m t·∫•t c·∫£ m√£ c√¥ng vi·ªác trong c√¢u h·ªèi

    if not job_codes:
        return "Kh√¥ng t√¨m th·∫•y m√£ c√¥ng vi·ªác. Vui l√≤ng nh·∫≠p m√£ c√¥ng vi·ªác (v√≠ d·ª•: #AI1402) ƒë·ªÉ nh·∫≠n th√¥ng tin chi ti·∫øt.\n\n‚ùì **C√¢u h·ªèi:** " + user_query

    job_details_list = fetch_job_details(job_codes)

    if not job_details_list:
        return f"Kh√¥ng t√¨m th·∫•y m√£ c√¥ng vi·ªác n√†o trong danh s√°ch: {', '.join(job_codes)}. H√£y ki·ªÉm tra l·∫°i.\n\n‚ùì **C√¢u h·ªèi:** {user_query}"

    context_texts = []
    found_jobs = set()
    
    for job_details in job_details_list:
        _, job_code, title, company, requirements, salary, job_type, date = job_details
        found_jobs.add(job_code)  # L∆∞u l·∫°i m√£ c√¥ng vi·ªác ƒë√£ t√¨m th·∫•y
        
        context_texts.append(
            f"üìù **M√£ c√¥ng vi·ªác:** #{job_code}\n"
            f"üìå **C√¥ng vi·ªác:** {title}\n"
            f"üè¢ **C√¥ng ty:** {company}\n"
            f"üìÇ **Lo·∫°i c√¥ng vi·ªác:** {job_type}\n"
            f"üìÖ **Ng√†y ƒëƒÉng:** {date}\n\n"
            f"### üìå Y√™u c·∫ßu c√¥ng vi·ªác:\n{requirements.replace('‚Ä¢', '\n-')}\n\n"
            f"### üí∞ Quy·ªÅn l·ª£i ƒë∆∞·ª£c h∆∞·ªüng:\n{salary.replace('‚Ä¢', '\n-')}\n"
        )

    missing_jobs = set(job_codes) - found_jobs  # T√¨m c√°c m√£ kh√¥ng c√≥ trong database
    if missing_jobs:
        context_texts.append(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin cho c√°c m√£ c√¥ng vi·ªác sau: {', '.join(missing_jobs)}.")

    return "\n\n---\n\n".join(context_texts) + f"\n\n‚ùì **C√¢u h·ªèi:** {user_query}"

def job_chatbot():
    """Giao di·ªán chatbot h·ªó tr·ª£ t√¨m ki·∫øm th√¥ng tin vi·ªác l√†m."""
    st.subheader("üí¨ H·ªèi ƒë√°p c√πng Chatbot")
    user_query = st.text_input("‚úçÔ∏è Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n:")

    if user_query:
        track_usage("job_chatbot_query")  # ƒê·∫øm s·ªë l∆∞·ª£t h·ªèi chatbot.

        # T·∫°o prompt t·ªëi ∆∞u h√≥a cho vi·ªác t∆∞ v·∫•n ngh·ªÅ nghi·ªáp
        prompt = f"""
        B·∫°n l√† m·ªôt chatbot t∆∞ v·∫•n ngh·ªÅ nghi·ªáp th√¥ng minh. H√£y tr·∫£ l·ªùi c√¢u h·ªèi d∆∞·ªõi ƒë√¢y m·ªôt c√°ch chuy√™n nghi·ªáp, ch√≠nh x√°c v√† ng·∫Øn g·ªçn.
        
        1. N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn **m·ªôt c√¥ng vi·ªác c·ª• th·ªÉ**, h√£y cung c·∫•p th√¥ng tin v·ªÅ:
           - M√¥ t·∫£ c√¥ng vi·ªác
           - K·ªπ nƒÉng c·∫ßn thi·∫øt
           - M·ª©c l∆∞∆°ng trung b√¨nh
           - Xu h∆∞·ªõng tuy·ªÉn d·ª•ng

        2. N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn **l·ªô tr√¨nh s·ª± nghi·ªáp**, h√£y t∆∞ v·∫•n c√°c b∆∞·ªõc h·ªçc t·∫≠p, kinh nghi·ªám v√† ch·ª©ng ch·ªâ c·∫ßn c√≥.

        3. N·∫øu c√¢u h·ªèi y√™u c·∫ßu so s√°nh c√°c c√¥ng vi·ªác, h√£y ch·ªâ ra ∆∞u, nh∆∞·ª£c ƒëi·ªÉm c·ªßa t·ª´ng ngh·ªÅ.

        4. Tr√°nh tr·∫£ l·ªùi c√°c c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn vi·ªác l√†m.

        C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: {user_query}
        """

        try:
            llm = genai.GenerativeModel('gemini-1.5-flash')
            response = llm.generate_content(prompt)
            st.write("### üì¢ Tr·∫£ l·ªùi t·ª´ Chatbot:")
            st.success(response.text)
        except Exception as e:
            st.error(f"L·ªói k·∫øt n·ªëi API: {e}")

